-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI Mongo=som.umltonosql.metamodel.mongodb

module classtomongodb;

create OUT : Mongo from IN : UML;

helper def : getNotAbstractClasses() : Sequence(UML!Class) = 
	UML!Class.allInstances()->select(cc | not(cc.isAbstract))	
;

--helper context UML!Property def : refersToClass() : Boolean =
--	UML!Class.allInstances()->collect(cc | cc.name)->contains(self.type.name)
--;

helper context UML!Property def : isClassAttribute() : Boolean =
	self.owner.oclIsTypeOf(UML!Class)
;

helper context UML!Property def : isAssociationAttribute() : Boolean =
	self.owner.oclIsTypeOf(UML!Association)
;

helper context UML!Property def : isAssociationClassAttribute() : Boolean =
	self.owner.oclIsTypeOf(UML!AssociationClass)
;

helper context UML!Property def : isMultiValued() : Boolean = 
	self.upper = -1 or self.upper > 1
;

helper context UML!Class def : getAssociations() : Sequence(UML!Association) =
	UML!Association.allInstances()->select(aa | aa.ownedEnd->collect(ee | ee.type)->contains(self))
;

helper context UML!Association def : getOtherEnd(class : UML!Class) : UML!Property = 
	if self.memberEnd.at(1).type = class then
		self.memberEnd.at(2)
	else if self.memberEnd.at(2).type = class then
		self.memberEnd.at(1)
	else
		OclUndefined.debug('Cannot find other end')
	endif
	endif
;

rule model2database {
	from
		model : UML!Model
	to
		database : Mongo!Database(
			collections <- thisModule.getNotAbstractClasses()->collect(cc | thisModule.class2collection(cc))
		)
}

lazy rule class2collection {
	from
		class : UML!Class
	to
		collection : Mongo!"Collection"(
			name <- class.name,
			documents <- class
		)
}

rule class2document {
	from
		class : UML!Class
	to 
		document : Mongo!Document(
			fields <- class.attribute->union(Sequence{id})->union(class.getAssociations()->collect(aa | aa.getOtherEnd(class)))	
		),
		id : Mongo!Field(
			key <- '_id',
			type <- idType
		),
		idType : Mongo!SimpleType(
			name <- 'String'	
		)
}

rule simpleClassAttribute2field {
	from
		attribute : UML!Property(attribute.isClassAttribute())
	to
		field : Mongo!Field(
			key <- attribute.name,
			type <- simpleType
		),
		simpleType : Mongo!SimpleType(
			name <- attribute.type.name	
		)
}

rule associationAttribute2field {
	from
		attribute : UML!Property(attribute.isAssociationAttribute() and not(attribute.isMultiValued()))
	to
		field : Mongo!Field(
			key <- attribute.name,
			type <- refId
		),
		refId : Mongo!UmlToNoSQLIDReference(
			name <- attribute.type.name
		)
}

rule associationMultipleAttribute2field {
	from
		attribute : UML!Property(attribute.isAssociationAttribute() and attribute.isMultiValued())
	to
		field : Mongo!Field(
			key <- attribute.name,
			type <- refId
		), 
		refId : Mongo!CollectionType(
			name <- attribute.type.name	
		)
}